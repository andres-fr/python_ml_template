# The overall structure of this action should be as follows:
# 1. Run tests for all kinds of push and PR
# 2. If the event was a tag, Build and release package and docs
# Note that for tagged commits, this will run point 1 twice, but GH has no way of preventing this as for Oct2020
# https://github.community/t/avoid-double-builds-when-reacting-on-conditional-tag-event/16656

name: CI  # this name will show up in the badge

on:
  push:
    branches:
      - master
    tags:
      - "**"
  pull_request:
    branches:
      - master

env:
  DOCS_DIR: "docs"
  LIB_NAME: "ml_lib"
  VERSION_FILE: "_metadata.py"  # inside LIB_NAME
  #
  COVERAGE_REPORT_FLAGS: "--omit ml_lib/data --fail-under 60"
  #
  EXCLUDE_FROM_WHEEL: "tests tests.*"  # if you want to include the tests in the wheel set an empty string ""
  INCLUDE_PATHS: "ml_lib/data LICENSE"  # a sequence of paths with non-python data to include in the package
  CHANGELOG_PATH: "CHANGELOG.md"  # temporary file created in release job
jobs:




  test:
    name: "Lint, utest, coverage"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6]  #, 3.7, 3.8]
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install OS dependencies
        run: |
          sudo apt-get update -y

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade --user pip --quiet --no-warn-script-location
          python -m pip install numpy Cython --upgrade-strategy only-if-needed --quiet
          python -m pip install -r requirements.txt --quiet
          python -m pip install -r requirements-dev.txt
          python --version
          pip --version
          python -m pip list
        shell: bash

      - name: Lint commit (commitizen)
        run: |
          cz check --rev-range HEAD  # ~1..HEAD  # since the runner only seems to have checked out the latest commit

      - name: Pre-commit check (code linting and many others)
        uses: pre-commit/action@v2.0.0

      - name: Run unit tests and generate coverage report
        run: |
          coverage run --source "$LIB_NAME" -m unittest

      - name: Validate coverage
        run: |
          coverage report `echo $COVERAGE_REPORT_FLAGS`



  release:
    name: "build (and optionally release)"
    runs-on: ubuntu-latest
    needs: test  # Only run if tests succeeded
    if: startsWith(github.ref, 'refs/tags/')  # ONLY IN TAGGED EVENTS (otherwise e.g. refs/heads/master)
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # deep fetch in order to make changelog
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
          architecture: x64
      - name: Install OS dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade --user pip --quiet --no-warn-script-location
          python -m pip install numpy Cython --upgrade-strategy only-if-needed --quiet
          python -m pip install -r requirements.txt --quiet
          python -m pip install -r requirements-dev.txt
          python --version
          pip --version
          python -m pip list
        shell: bash

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel -p "$LIB_NAME"/ -m "$LIB_NAME"/"$VERSION_FILE" -E `echo "$EXCLUDE_FROM_WHEEL"` -I `echo "$INCLUDE_PATHS"`

      # version is picked automatically from the bumpversion file
      - name: Build sphinx docs
        run: |
          VERSION=`python -c "from ${LIB_NAME} import __version__ as v; print(v)"`
          AUTHOR=`python -c "from ${LIB_NAME} import __author__ as a; print(a)"`
          python ci_scripts/sphinx_docs.py -p "$LIB_NAME"/ -a "$AUTHOR" -v "$VERSION" -o "$DOCS_DIR" -H -L -Y
          for i in "$DOCS_DIR"/_build/latex/*.pdf; do mv "$i" "${i%.*}_"$VERSION".pdf"; done
        shell: bash

      - name: Create changelog
        run: |
          python ci_scripts/commitizen_changelog.py -o "$CHANGELOG_PATH"
        shell: bash

      - name: Release package to GH
        uses: softprops/action-gh-release@v1
        # if: startsWith(github.ref, 'refs/tags/')  # ONLY IN TAGGED EVENTS
        with:
          body_path: ${{ env.CHANGELOG_PATH }}
          files: |
            ${{ env.DOCS_DIR }}/_build/html
            ${{ env.DOCS_DIR }}/_build/latex/*.pdf
            dist/${{ env.LIB_NAME }}*.whl
            # dist/${{ env.LIB_NAME }}*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish built docs to gh-pages branch
      - name: latest docs online
        # if: ${{ !github.event.repository.private }}  # do if repo is not private
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: ${{ env.DOCS_DIR }}/_build/html # The folder the action should deploy.
          CLEAN: true # Automatically remove deleted files from the deploy branch
